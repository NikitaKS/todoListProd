{"version":3,"sources":["components/TodoList.module.css","fonts/Bebas-Regular.ttf","fonts/BebasNeue-Light.ttf","fonts/BebasNeue-Book.ttf","serviceWorker.ts","dal/api.ts","redux/reducer.ts","redux/store.ts","components/DeleteButton.tsx","types/ActionTypes.ts","components/TodoListTabs.tsx","svg/SVG.tsx","components/TodoListHeader.tsx","components/Task.tsx","components/TodoListTasks.tsx","components/ButtonSaveForm.tsx","components/AddTaskForm.tsx","components/AddButton.tsx","components/TodoList.tsx","redux/Selectors.ts","components/AddTodoListForm.tsx","components/TodoListTabsWrapper.tsx","App.tsx","components/MainComponent.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","instance","axios","create","baseURL","withCredentials","headers","api","get","then","response","data","listId","res","items","title","post","item","taskId","task","put","delete","resultCode","email","password","SET_TODOLISTS","ADD_TASK","ADD_LIST","CHANGE_TASK","DELETE_TASK","DELETE_LIST","CHANGE_LIST_TITLE","initialState","todoLists","setTodoListsTC","dispatch","forEach","tl","id","todoList","tasks","type","addTaskTC","todolistId","description","newTask","addTaskAC","addListTC","newList","addListAC","changeTaskTC","obj","getState","todolists","find","t","changeTaskAC","changeListTitleTC","changeListTitleAC","deleteTaskTC","code","deleteTaskAC","deleteListTC","deleteListAC","rootReducer","combineReducers","state","action","map","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","s","require","DeleteButton","TasksStatus","props","styles","position","bottom","right","backgroundColor","opacity","className","deleteButton","style","onClick","TodoListTabs","setCurrentList","history","push","event","stopPropagation","deleteList","todoListsWrapper","this","tlTitle","tlCount","count","React","Component","SVG","fill","width","viewBox","height","xmlns","xmlnsXlink","d","TodoListHeader","changeTitle","e","currentTarget","value","length","setState","toggleTitle","color","addForm","headerWrapper","inputTitle","autoFocus","onChange","onBlur","cursor","tasksCounter","tasksCount","closeList","arrowBack","Task","changeTask","status","New","checked","Completed","doubleClick","deleteTask","taskWrapper","bContain","bInput","taskDesc","onDoubleClick","taskTitle","taskText","TodoListTasks","key","tasksWrapper","ButtonSaveForm","class","buttonText","AddTaskForm","desc","changeDesc","addTask","currentTask","deActiveAddForm","addTaskFormWrapper","inputWrapper","addTitle","h4","placeholder","addText","buttonFormWrapper","btnClose","btnSave","AddButton","buttonAddWrapper","addItem","buttonAdd","TodoList","activeAddForm","changeListTitle","addTaskForm","tasksForm","todoListWrapper","connect","getTodolistsSelector","sort","a","b","order","AddTodoListForm","setTitle","addNewList","toggleAddForm","TodoListTabsWrapper","todoListsFormWrapper","children","flexShrink","App","addMode","closeTodoList","addList","deleteTodoList","getTodoLists","currentTodoList","params","maxHeight","withRouter","MainComponent","innerHeight","path","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b822a621.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListsFormWrapper\":\"TodoList_todoListsFormWrapper__2ZLqi\",\"todoListWrapper\":\"TodoList_todoListWrapper__C1AMh\",\"headerWrapper\":\"TodoList_headerWrapper__2LBSr\",\"arrowBack\":\"TodoList_arrowBack__18oD_\",\"inputTitle\":\"TodoList_inputTitle__3CGPI\",\"tasksCounter\":\"TodoList_tasksCounter__1Iav4\",\"tasksWrapper\":\"TodoList_tasksWrapper__2XKIW\",\"taskWrapper\":\"TodoList_taskWrapper__1QtxF\",\"checkBox\":\"TodoList_checkBox__fMglL\",\"checkmark\":\"TodoList_checkmark__3kNNn\",\"taskDesc\":\"TodoList_taskDesc__3uexz\",\"taskTitle\":\"TodoList_taskTitle__3cToZ\",\"taskText\":\"TodoList_taskText__3xJZI\",\"deleteButton\":\"TodoList_deleteButton__28dai\",\"todoListsWrapper\":\"TodoList_todoListsWrapper__3J3dJ\",\"addTaskFormWrapper\":\"TodoList_addTaskFormWrapper__2yekr\",\"inputWrapper\":\"TodoList_inputWrapper__2YLhm\",\"title\":\"TodoList_title__17gTb\",\"h4\":\"TodoList_h4__36Viq\",\"addTitle\":\"TodoList_addTitle__3U-6e\",\"addText\":\"TodoList_addText__3xKoA\",\"buttonAddWrapper\":\"TodoList_buttonAddWrapper__11Xgl\",\"buttonAdd\":\"TodoList_buttonAdd__2CIws\",\"buttonFormWrapper\":\"TodoList_buttonFormWrapper__2bdVp\",\"btnClose\":\"TodoList_btnClose__1Jm1x\",\"btnSave\":\"TodoList_btnSave__3X9XM\",\"bContain\":\"TodoList_bContain__IBxR8\",\"bInput\":\"TodoList_bInput__-bcSm\",\"b-ripple\":\"TodoList_b-ripple__2OUjM\",\"b-ripple-duplicate\":\"TodoList_b-ripple-duplicate__3kSNP\"};","module.exports = __webpack_public_path__ + \"static/media/Bebas-Regular.1cb1f763.ttf\";","module.exports = __webpack_public_path__ + \"static/media/BebasNeue-Light.2594d637.ttf\";","module.exports = __webpack_public_path__ + \"static/media/BebasNeue-Book.0e0f3f2f.ttf\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n        process.env.PUBLIC_URL,\n        window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\r\nimport {ITask} from \"../types/ActionTypes\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': 'a1408a51-e2c8-48b4-9b0f-06ce8121bd8d'}\r\n});\r\n\r\nexport const api = {\r\n    getTodoLists() {\r\n        return instance.get('').then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    getTasks(listId: string) {\r\n        return instance.get(`/${listId}/tasks`).then((res) => {\r\n            return res.data.items;\r\n        })\r\n    },\r\n    addTask(listId: string, title: string) {\r\n        return instance.post(`/${listId}/tasks`, {title: title}).then((res) => {\r\n            return res.data.data.item;\r\n        })\r\n    },\r\n    addList(title: string) {\r\n        return instance.post(`/`, {title: title}).then((res) => {\r\n            return res.data.data.item;\r\n        })\r\n    },\r\n    changeTask(listId: string, taskId: string, task: ITask) {\r\n        return instance.put(`/${listId}/tasks/${taskId}`, task).then(res => {\r\n            return res.data.data.item;\r\n        })\r\n    },\r\n    deleteTask(listId: string, taskId: string) {\r\n        return instance.delete(`/${listId}/tasks/${taskId}`).then(res => {\r\n            return res.data.resultCode;\r\n        })\r\n    },\r\n    deleteList(listId: string) {\r\n        return instance.delete(`/${listId}`).then(res => {\r\n            return res.data.resultCode;\r\n        })\r\n    },\r\n    changeListTitle(listId: string, title: string) {\r\n        return instance.put(`/${listId}`, {title}).then(res => {\r\n            return res.data\r\n        })\r\n    },\r\n    async login() {\r\n        try {\r\n            let result = await axios.post('https://social-network.samuraijs.com/api/1.0/auth/login',\r\n                {email: 'pancxxx@gmail.com', password: 'todolistproduction'},\r\n                {withCredentials: true,\r\n                    headers: {'API-KEY': 'a1408a51-e2c8-48b4-9b0f-06ce8121bd8d'}});\r\n        } catch(e) {\r\n\r\n        }\r\n\r\n    }\r\n};","import {\r\n    ISetTodoListActionTypes,\r\n    ITodoList,\r\n    ActionsTypes,\r\n    ITask,\r\n    IAddTaskActionTypes,\r\n    ITaskUpdate,\r\n    IDeleteTaskActionTypes,\r\n    IChangeListTitle,\r\n    IAddListActionTypes,\r\n    IChangeTaskActionTypes, IDeleteList,\r\n} from \"../types/ActionTypes\";\r\nimport {Dispatch} from \"redux\";\r\nimport {api} from \"../dal/api\";\r\nimport {AppState} from \"./store\";\r\n\r\nexport const SET_TODOLISTS = 'todolist/reducer/SET_TODOLISTS';\r\nexport const SET_TASKS = 'todolist/reducer/SET_TASKS';\r\nexport const ADD_TASK = 'todolist/reducer/ADD_TASK';\r\nexport const ADD_LIST = 'todolist/reducer/ADD_LIST';\r\nexport const CHANGE_TASK = 'todolist/reducer/CHANGE_TASK';\r\nexport const DELETE_TASK = 'todolist/reducer/DELETE_TASK';\r\nexport const DELETE_LIST = 'todolist/reducer/DELETE_LIST';\r\nexport const CHANGE_LIST_TITLE = 'todolist/reducer/CHANGE_LIST_TITLE';\r\n\r\ninterface IInitialState {\r\n    todoLists: ITodoList[];\r\n}\r\n\r\nlet initialState: IInitialState = {\r\n    todoLists: []\r\n};\r\nexport const reducer = (state = initialState, action: ActionsTypes): IInitialState => {\r\n    switch (action.type) {\r\n        case SET_TODOLISTS: {\r\n            return {...state, todoLists: [...state.todoLists, action.todoList]}\r\n        }\r\n        case SET_TASKS: {\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((tl: ITodoList) => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: action.tasks}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case ADD_TASK: {\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((tl: ITodoList) => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case ADD_LIST: {\r\n            return {\r\n                ...state,\r\n                todoLists: [...state.todoLists, action.newList]\r\n            }\r\n        }\r\n        case CHANGE_TASK: {\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((tl: ITodoList) => {\r\n                    if (tl.id === action.listId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map((t: ITask) => {\r\n                                if (t.id === action.task.id) {\r\n                                    return action.task\r\n                                } else {\r\n                                    return t\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case CHANGE_LIST_TITLE: {\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((tl: ITodoList) => {\r\n                    if (tl.id === action.listId) {\r\n                        return {\r\n                            ...tl,\r\n                            title: action.title\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DELETE_TASK: {\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map((tl: ITodoList) => {\r\n                    if (tl.id === action.listId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter((t: ITask) => {\r\n                                return t.id !== action.taskId\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DELETE_LIST: {\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.filter((tl: ITodoList) => tl.id !== action.listId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst setTodolistsAC = (todoList: ITodoList): ISetTodoListActionTypes => {\r\n    return {type: SET_TODOLISTS, todoList}\r\n};\r\n\r\nconst addTaskAC = (todolistId: string, newTask: ITask): IAddTaskActionTypes => {\r\n    return {type: ADD_TASK, todolistId, newTask}\r\n};\r\nconst addListAC = (newList: ITodoList): IAddListActionTypes => {\r\n    return {type: ADD_LIST, newList}\r\n};\r\nconst changeTaskAC = (listId: string, task: ITask): IChangeTaskActionTypes => {\r\n    return {type: CHANGE_TASK, listId, task}\r\n};\r\n\r\n// const del = (listId: string, taskId: string = '') => {\r\n//     if (taskId) {\r\n//         return {type: DELETE_TASK, listId, taskId};\r\n//     } else {\r\n//         return {type: DELETE_LIST, listId};\r\n//     }\r\n// }\r\n\r\nconst deleteTaskAC = (listId: string, taskId: string): IDeleteTaskActionTypes => {\r\n    return {type: DELETE_TASK, listId, taskId};\r\n};\r\nconst deleteListAC = (listId: string): IDeleteList => {\r\n    return {type: DELETE_LIST, listId};\r\n};\r\nconst changeListTitleAC = (listId: string, title: string): IChangeListTitle => {\r\n    return {type: CHANGE_LIST_TITLE, listId, title}\r\n};\r\n\r\nexport const setTodoListsTC = () => (dispatch: Dispatch) => {\r\n    api.getTodoLists().then((todoLists: ITodoList[]) => {\r\n        todoLists.forEach((tl: ITodoList) => {\r\n            api.getTasks(tl.id).then((res: ITask[]) => {\r\n                dispatch(setTodolistsAC({...tl, tasks: res}))\r\n            })\r\n        })\r\n    })\r\n};\r\n\r\nexport const addTaskTC = (todolistId: string, title: string, description: string) => (dispatch: Dispatch) => {\r\n    api.addTask(todolistId, title).then((newTask: ITask) => {\r\n        api.changeTask(todolistId, newTask.id, {...newTask, description}).then((res: ITask) => {\r\n            dispatch(addTaskAC(todolistId, res))\r\n        })\r\n    })\r\n};\r\nexport const addListTC = (title: string) => (dispatch: Dispatch) => {\r\n    api.addList(title).then((newList: ITodoList) => {\r\n        dispatch(addListAC({...newList, tasks: []}))\r\n    })\r\n};\r\n\r\nexport const changeTaskTC = (listId: string, taskId: string, obj: ITaskUpdate) => (dispatch: Dispatch, getState: () => AppState) => {\r\n    let todoList = getState().todolists.todoLists.find((tl: ITodoList) => tl.id === listId);\r\n    if (todoList) {\r\n        let task = todoList.tasks.find((t: ITask) => t.id === taskId);\r\n        if (task) {\r\n            let newTask = {...task, ...obj};\r\n            api.changeTask(listId, taskId, newTask).then((res: ITask) => {\r\n                dispatch(changeTaskAC(listId, res))\r\n            })\r\n        }\r\n    }\r\n};\r\n\r\nexport const changeListTitleTC = (listId: string, title: string) => (dispatch: Dispatch) => {\r\n    api.changeListTitle(listId, title).then(res => {\r\n        if (res.resultCode === 0) {\r\n            dispatch(changeListTitleAC(listId, title))\r\n        }\r\n    })\r\n};\r\n\r\nexport const deleteTaskTC = (listId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    api.deleteTask(listId, taskId).then(code => {\r\n        if (code === 0) {\r\n            dispatch(deleteTaskAC(listId, taskId))\r\n        }\r\n    })\r\n};\r\nexport const deleteListTC = (listId: string) => (dispatch: Dispatch) => {\r\n    api.deleteList(listId).then(code => {\r\n        if (code === 0) {\r\n            dispatch(deleteListAC(listId))\r\n        }\r\n    })\r\n};\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {reducer} from \"./reducer\";\r\nimport {ActionsTypes} from \"../types/ActionTypes\";\r\nimport thunk, {ThunkMiddleware} from \"redux-thunk\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\nlet rootReducer = combineReducers({\r\n    todolists: reducer\r\n});\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk as ThunkMiddleware<AppState, ActionsTypes>)));\r\nexport default store;","import * as React from \"react\";\r\n\r\nconst s = require(\"./TodoList.module.css\");\r\n\r\ninterface IProps {\r\n    onClick: (event: React.MouseEvent<HTMLElement>) => void;\r\n    position?: string;\r\n}\r\n\r\nfunction DeleteButton(props: IProps) {\r\n    let styles = {};\r\n    if (props.position) {\r\n        styles = {\r\n            position: props.position,\r\n            bottom: '5px',\r\n            right: '5px',\r\n            backgroundColor: 'rgb(255, 40, 81)',\r\n            opacity:0.1\r\n        };\r\n    }\r\n    return (\r\n        <div className={s.deleteButton} style={{...styles}} onClick={props.onClick}></div>\r\n    )\r\n}\r\n\r\nexport default DeleteButton;","import {\r\n    SET_TODOLISTS,\r\n    SET_TASKS,\r\n    ADD_TASK,\r\n    ADD_LIST,\r\n    CHANGE_TASK,\r\n    DELETE_TASK, CHANGE_LIST_TITLE, DELETE_LIST,\r\n} from \"../redux/reducer\";\r\nimport exp from \"constants\";\r\n\r\n\r\nexport enum TasksStatus {\r\n    New = 0,\r\n    Completed = 2\r\n}\r\n\r\nexport interface ITask {\r\n    id: string\r\n    title: string\r\n    description: string | null\r\n    completed: boolean\r\n    todoListId: string\r\n    order: number\r\n    status: TasksStatus\r\n    priority: number\r\n    startDate?: string | null\r\n    deadline?: string | null\r\n    addedDate: string\r\n}\r\n\r\nexport interface ITodoList {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n    tasks: ITask[];\r\n}\r\n\r\nexport interface ITaskUpdate {\r\n    status?: TasksStatus;\r\n    title?: string;\r\n    description?: string\r\n}\r\n\r\nexport interface ISetTodoListActionTypes {\r\n    type: typeof SET_TODOLISTS\r\n    todoList: ITodoList\r\n}\r\n\r\n\r\nexport interface ISetTasksActionTypes {\r\n    type: typeof SET_TASKS;\r\n    tasks: ITask[];\r\n    todolistId: string;\r\n}\r\n\r\nexport interface IAddTaskActionTypes {\r\n    type: typeof ADD_TASK;\r\n    todolistId: string;\r\n    newTask: ITask;\r\n}\r\n\r\nexport interface IAddListActionTypes {\r\n    type: typeof ADD_LIST;\r\n    newList: ITodoList;\r\n}\r\n\r\nexport interface IChangeTaskActionTypes {\r\n    type: typeof CHANGE_TASK;\r\n    listId: string;\r\n    task: ITask;\r\n}\r\n\r\nexport interface IDeleteTaskActionTypes {\r\n    type: typeof DELETE_TASK;\r\n    listId: string;\r\n    taskId: string;\r\n}\r\n\r\nexport interface IChangeListTitle {\r\n    type: typeof CHANGE_LIST_TITLE;\r\n    title: string;\r\n    listId: string\r\n}\r\nexport interface IDeleteList {\r\n    type:typeof DELETE_LIST;\r\n    listId:string;\r\n}\r\n\r\nexport type ActionsTypes = ISetTodoListActionTypes\r\n    | ISetTasksActionTypes\r\n    | IAddListActionTypes\r\n    | IAddTaskActionTypes\r\n    | IChangeTaskActionTypes\r\n    | IDeleteTaskActionTypes\r\n    | IChangeListTitle\r\n    | IDeleteList\r\n    | IChangeTaskActionTypes;","import React from 'react';\nimport DeleteButton from \"./DeleteButton\";\n\nconst s = require(\"./TodoList.module.css\");\n\ninterface IProps {\n    id: string;\n    title: string;\n    count: number;\n    history: any;\n    deleteList: (id: string) => void\n}\n\n\nclass TodoListTabs extends React.Component<IProps> {\n    setCurrentList = () => {\n        this.props.history.push(this.props.id);\n    };\n    delete = (event: React.MouseEvent<HTMLElement>) => {\n        event.stopPropagation();\n        this.props.deleteList(this.props.id)\n    };\n\n    render() {\n        return (\n            <div className={s.todoListsWrapper} onClick={this.setCurrentList}>\n                <div className={s.tlTitle}>{this.props.title}</div>\n                <div className={s.tlCount}>{this.props.count}</div>\n                <DeleteButton position='absolute' onClick={this.delete}/>\n            </div>\n        )\n    }\n}\n\n\nexport default (TodoListTabs);\n","import React from \"react\";\r\n\r\nconst SVG = ({\r\n                 style = {}, fill = \"#000\",\r\n                 width = \"100%\", className = \"\", viewBox = \"0 0 64 64\",\r\n             }) => (\r\n    <svg width={width} style={style} height={width} viewBox={viewBox}\r\n         xmlns=\"http://www.w3.org/2000/svg\" className={`${className || \"\"}`} xmlnsXlink=\"http://www.w3.org/1999/xlink\">\r\n        <path fill={fill}\r\n              d=\"m54 30h-39.899l15.278-14.552c.8-.762.831-2.028.069-2.828-.761-.799-2.027-.831-2.828-.069l-17.448 16.62c-.755.756-1.172 1.76-1.172 2.829 0 1.068.417 2.073 1.207 2.862l17.414 16.586c.387.369.883.552 1.379.552.528 0 1.056-.208 1.449-.621.762-.8.731-2.065-.069-2.827l-15.342-14.552h39.962c1.104 0 2-.896 2-2s-.896-2-2-2z\"/>\r\n    </svg>\r\n);\r\n\r\nexport default SVG;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport Arrow from '../svg/SVG'\r\n\r\nconst s = require(\"./TodoList.module.css\");\r\n\r\ninterface IProps {\r\n    title: string;\r\n    tasksCount: number;\r\n    addForm: boolean;\r\n    closeList: () => void;\r\n    changeTitle: (title: string) => void;\r\n}\r\n\r\ninterface IState {\r\n    changeTitle: boolean;\r\n    title: string\r\n}\r\n\r\nclass TodoListHeader extends React.Component<IProps, IState> {\r\n    state: IState = {\r\n        changeTitle: false,\r\n        title: this.props.title\r\n    };\r\n    changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e.currentTarget.value.length <= 15){\r\n            this.setState({title: e.currentTarget.value})\r\n        }\r\n\r\n    };\r\n    toggleTitle = () => {\r\n        this.setState({changeTitle: !this.state.changeTitle});\r\n        if (this.state.title !== this.props.title) {\r\n            this.props.changeTitle(this.state.title);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let color = this.props.addForm ? '#ff2851' : '#0a0224';\r\n        return (\r\n            <div className={s.headerWrapper} style={{backgroundColor: color}}>\r\n                {\r\n                   !this.props.addForm && this.state.changeTitle\r\n                        ? <input className={s.inputTitle} autoFocus={true}\r\n                                 onChange={this.changeTitle} value={this.state.title}\r\n                                 onBlur={this.toggleTitle} type=\"text\"/>\r\n                        : <div onClick={this.toggleTitle} style={{cursor:'pointer'}} className={s.title}> {this.props.title} </div>\r\n                }\r\n                <div className={s.tasksCounter}> {this.props.tasksCount} open task</div>\r\n                <div onClick={this.props.closeList}>\r\n                    <Arrow className={s.arrowBack} width={'35'} fill={'#ff2851'}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListHeader;","import *as React from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\nimport {ITask, TasksStatus, ITaskUpdate} from \"../types/ActionTypes\";\r\nimport DeleteButton from \"./DeleteButton\";\r\n\r\nconst s = require(\"./TodoList.module.css\");\r\n\r\ninterface IProps {\r\n    task: ITask;\r\n    changeTask: (taskId: string, obj: ITaskUpdate) => void;\r\n    doubleClick: (tasks: ITask) => void;\r\n    deleteTask: (taskId: string) => void;\r\n}\r\n\r\nclass Task extends React.Component<IProps> {\r\n    changeTask = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = TasksStatus.New;\r\n        if (e.currentTarget.checked) {\r\n            status = TasksStatus.Completed\r\n        }\r\n        this.props.changeTask(this.props.task.id, {status})\r\n    };\r\n    doubleClick = () => {\r\n        this.props.doubleClick(this.props.task)\r\n    };\r\n    deleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id)\r\n    };\r\n\r\n    render() {\r\n        let {task} = this.props;\r\n        let checked = task.status === 2;\r\n        return (\r\n            <div className={s.taskWrapper}>\r\n                <label className={s.bContain}>\r\n                    <input type='checkbox' checked={checked} onChange={this.changeTask}></input>\r\n                    <div className={s.bInput}></div>\r\n                </label>\r\n                <div className={s.taskDesc} onDoubleClick={this.doubleClick}>\r\n                    <div className={s.taskTitle}>{task.title}</div>\r\n                    <div className={s.taskText}>{task.description}</div>\r\n                </div>\r\n                <DeleteButton onClick={this.deleteTask}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;","import * as React from \"react\";\r\nimport Task from \"./Task\";\r\nimport {ITask, ITaskUpdate} from \"../types/ActionTypes\";\r\n\r\nconst s = require(\"./TodoList.module.css\");\r\n\r\ninterface IProps {\r\n    tasks: ITask[];\r\n    changeTask: (taskId: string, obj: ITaskUpdate) => void;\r\n    doubleClick: (tasks: ITask) => void;\r\n    deleteTask: (taskId: string) => void;\r\n}\r\n\r\nclass TodoListTasks extends React.Component<IProps> {\r\n\r\n\r\n    render() {\r\n        let tasks = this.props.tasks.map(task => {\r\n            return <Task key={task.id} changeTask={this.props.changeTask} deleteTask={this.props.deleteTask}\r\n                         doubleClick={this.props.doubleClick} task={task}/>\r\n        });\r\n        return (\r\n            <div className={s.tasksWrapper}>\r\n                {tasks}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;","import * as React from \"react\";\r\n\r\ninterface IProps {\r\n    onClick: () => void;\r\n    buttonText: string;\r\n    class:any\r\n}\r\n\r\nfunction ButtonSaveForm (props: IProps) {\r\n    return (\r\n        <button className={props.class} onClick={props.onClick}>{props.buttonText}</button>\r\n    )\r\n}\r\n\r\nexport default ButtonSaveForm;","import * as React from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\nimport {ITask, ITaskUpdate} from \"../types/ActionTypes\";\r\nimport ButtonSaveForm from \"./ButtonSaveForm\";\r\n\r\nconst s = require(\"./TodoList.module.css\");\r\n\r\ninterface IProps {\r\n    deActiveAddForm: () => void;\r\n    addTask: (title: string, description: string) => void;\r\n    changeTask: (taskId: string, obj: ITaskUpdate) => void;\r\n    currentTask: ITask | null\r\n}\r\n\r\ninterface IState {\r\n    title: string\r\n    desc: string\r\n}\r\n\r\nclass AddTaskForm extends React.Component<IProps, IState> {\r\n    state: IState = {\r\n        title: '',\r\n        desc: '',\r\n    };\r\n\r\n    componentDidMount(): void {\r\n        if (this.props.currentTask) {\r\n            this.setState({\r\n                title: this.props.currentTask.title,\r\n                desc: this.props.currentTask.description ? this.props.currentTask.description : '',\r\n            })\r\n        }\r\n    }\r\n\r\n    changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value.length <= 20) {\r\n            this.setState({title: e.currentTarget.value})\r\n        }\r\n    };\r\n    changeDesc = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({desc: e.currentTarget.value})\r\n\r\n    };\r\n    addTask = () => {\r\n        if (this.props.currentTask) {\r\n            this.props.changeTask(this.props.currentTask.id, {\r\n                title: this.state.title,\r\n                description: this.state.desc\r\n            });\r\n        } else {\r\n            this.props.addTask(this.state.title, this.state.desc);\r\n        }\r\n\r\n        this.props.deActiveAddForm();\r\n    };\r\n    buttonText = !this.props.currentTask ? 'Add' : 'Save';\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.addTaskFormWrapper}>\r\n                <div className={s.inputWrapper}>\r\n                    <div className={s.addTitle}>\r\n                        <div className={`${s.title} ${s.h4}`}>Title</div>\r\n                        <input value={this.state.title} onChange={this.changeTitle} type=\"text\"\r\n                               placeholder='Enter Task Title'/>\r\n                    </div>\r\n                    <div className={s.addText}>\r\n                        <div className={`${s.title} ${s.h4}`}>Description</div>\r\n                        <input value={this.state.desc} onChange={this.changeDesc} type=\"text\"\r\n                               placeholder='Enter Task Description'/>\r\n                    </div>\r\n                </div>\r\n                <div className={s.buttonFormWrapper}>\r\n                    <ButtonSaveForm class={s.btnClose} onClick={this.props.deActiveAddForm} buttonText={'Close'}/>\r\n                    <ButtonSaveForm class={s.btnSave} onClick={this.addTask} buttonText={this.buttonText}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTaskForm;","import * as React from \"react\";\r\n\r\nconst s = require(\"./TodoList.module.css\");\r\n\r\ninterface IProps {\r\n    addItem: () => void;\r\n}\r\n\r\nclass AddButton extends React.Component<IProps> {\r\n    render() {\r\n        return (\r\n            <div className={s.buttonAddWrapper}>\r\n                <div onClick={this.props.addItem} className={s.buttonAdd}></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddButton;","import * as React from \"react\";\r\nimport TodoListHeader from \"./TodoListHeader\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport AddTaskForm from \"./AddTaskForm\";\r\nimport AddButton from \"./AddButton\";\r\nimport {ActionsTypes, ITask, ITaskUpdate} from \"../types/ActionTypes\";\r\nimport {connect} from \"react-redux\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {addTaskTC, changeListTitleTC, changeTaskTC, deleteTaskTC} from \"../redux/reducer\";\r\n\r\nconst s = require(\"./TodoList.module.css\");\r\n\r\ninterface IProps {\r\n    title: string;\r\n    id: string;\r\n    tasks: ITask[];\r\n    closeList: () => void;\r\n}\r\n\r\ninterface IState {\r\n    addForm: boolean;\r\n    currentTask: null | ITask;\r\n}\r\n\r\ninterface IMDTP {\r\n    addTask: (listId: string, title: string, description: string) => void\r\n    changeTask: (listId: string, taskId: string, obj: ITaskUpdate) => void\r\n    deleteTask: (listId: string, taskId: string) => void\r\n    changeListTitle: (listId: string, title: string) => void\r\n}\r\n\r\nclass TodoList extends React.Component<IProps & IMDTP, IState> {\r\n    state: IState = {\r\n        addForm: false,\r\n        currentTask: null\r\n    };\r\n    activeAddForm = () => {\r\n        this.setState({addForm: true})\r\n    };\r\n    deActiveAddForm = () => {\r\n        this.setState({addForm: false, currentTask: null})\r\n    };\r\n    addTask = (title: string, description: string) => {\r\n        this.props.addTask(this.props.id, title, description)\r\n    };\r\n\r\n    changeTask = (taskId: string, obj: ITaskUpdate) => {\r\n        this.props.changeTask(this.props.id, taskId, obj);\r\n        this.setState({currentTask: null})\r\n    };\r\n    changeListTitle = (title: string) => {\r\n        this.props.changeListTitle(this.props.id, title)\r\n    };\r\n\r\n    doubleClick = (task: ITask) => {\r\n        this.setState({currentTask: task, addForm: true})\r\n    };\r\n    deleteTask = (taskId: string) => {\r\n        this.props.deleteTask(this.props.id, taskId)\r\n    };\r\n\r\n    render() {\r\n        let tasksCount = this.props.tasks.length;\r\n\r\n        let addTaskForm = <AddTaskForm currentTask={this.state.currentTask} addTask={this.addTask}\r\n                                       deActiveAddForm={this.deActiveAddForm} changeTask={this.changeTask}/>;\r\n        let tasksForm =\r\n            <>\r\n                <TodoListTasks changeTask={this.changeTask}\r\n                               doubleClick={this.doubleClick}\r\n                               deleteTask={this.deleteTask}\r\n                               tasks={this.props.tasks}/>\r\n                <AddButton addItem={this.activeAddForm}/>\r\n            </>;\r\n\r\n        return (\r\n            <div className={s.todoListWrapper}>\r\n                <TodoListHeader addForm={this.state.addForm} title={this.props.title}\r\n                                changeTitle={this.changeListTitle} tasksCount={tasksCount}\r\n                                closeList={this.props.closeList}/>\r\n                {\r\n                    !this.state.addForm ? tasksForm : addTaskForm\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mdtp = (dispatch: ThunkDispatch<any, any, ActionsTypes>): IMDTP => {\r\n    return {\r\n        addTask: (listId: string, title: string, description: string) => {\r\n            let thunk = addTaskTC(listId, title, description);\r\n            dispatch(thunk)\r\n        },\r\n        changeTask: (listId: string, taskId: string, obj: ITaskUpdate) => {\r\n            let thunk = changeTaskTC(listId, taskId, obj);\r\n            dispatch(thunk)\r\n        },\r\n        deleteTask: (listId: string, taskId: string) => {\r\n            let thunk = deleteTaskTC(listId, taskId);\r\n            dispatch(thunk)\r\n        },\r\n        changeListTitle: (listId: string, title: string) => {\r\n            let thunk = changeListTitleTC(listId, title);\r\n            dispatch(thunk)\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default connect(null, mdtp)(TodoList);","import {AppState} from \"./store\";\r\nimport {ITodoList} from \"../types/ActionTypes\";\r\n\r\nexport const getTodolistsSelector = (state: AppState): ITodoList[] => {\r\n    const todoLists: ITodoList[] = state.todolists.todoLists;\r\n    todoLists.sort((a: any, b: any) => {\r\n        return b.order - a.order\r\n    });\r\n    return todoLists;\r\n};","import * as React from \"react\";\r\nimport ButtonSaveForm from \"./ButtonSaveForm\";\r\nimport {ChangeEvent} from \"react\";\r\n\r\nconst s = require(\"./TodoList.module.css\");\r\n\r\ninterface IProps {\r\n    toggleAddForm: () => void;\r\n    addNewList: (title: string) => void;\r\n}\r\n\r\ninterface IState {\r\n    title: string;\r\n}\r\n\r\n\r\nclass AddTodoListForm extends React.Component<IProps, IState> {\r\n    state: IState = {\r\n        title: ''\r\n    };\r\n    setTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value.length <= 15) {\r\n            this.setState({title: e.currentTarget.value})\r\n        }\r\n    };\r\n    addNewList = () => {\r\n        this.props.addNewList(this.state.title)\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.addTaskFormWrapper}>\r\n                <div className={s.title}>New Todolist</div>\r\n                <div className={s.inputWrapper}>\r\n                    <div className={s.addTitle}>\r\n                        <div className={`${s.title} ${s.h4}`}>Todolist Title</div>\r\n                        <input type=\"text\" value={this.state.title} onChange={this.setTitle} placeholder='Enter Todolist Title'/>\r\n                    </div>\r\n                </div>\r\n                <div className={s.buttonFormWrapper}>\r\n                    <ButtonSaveForm class={s.btnClose} onClick={this.props.toggleAddForm} buttonText={'Close'}/>\r\n                    <ButtonSaveForm class={s.btnSave} onClick={this.addNewList} buttonText={'Add'}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodoListForm;","import React, {ReactNode} from 'react';\n\nconst s = require(\"./TodoList.module.css\");\n\ninterface IProps {\n    children: ReactNode;\n    onClick: () => void\n}\n\n\nfunction TodoListTabsWrapper(props: IProps) {\n    return (\n        <>\n            <div className={s.todoListsFormWrapper}>\n                {props.children}\n            </div>\n            <div onClick={props.onClick} className={s.buttonAdd}\n                 style={{backgroundColor: '#ff2851', flexShrink: 0}}></div>\n        </>\n    )\n}\n\n\nexport default (TodoListTabsWrapper);\n","import React from 'react';\nimport './App.css';\nimport {AppState} from \"./redux/store\";\nimport {ActionsTypes, ITodoList} from './types/ActionTypes';\nimport {addListTC, deleteListTC, setTodoListsTC} from \"./redux/reducer\";\nimport {ThunkDispatch} from 'redux-thunk';\nimport {connect} from 'react-redux';\nimport TodoListTabs from \"./components/TodoListTabs\";\nimport TodoList from \"./components/TodoList\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {getTodolistsSelector} from './redux/Selectors';\nimport AddTodoListForm from \"./components/AddTodoListForm\";\nimport TodoListTabsWrapper from \"./components/TodoListTabsWrapper\";\nimport {api} from './dal/api';\n\ninterface IProps extends RouteComponentProps<any> {\n    id?: string;\n    maxHeight: number\n}\n\ninterface IMstp {\n    todoLists: ITodoList[];\n}\n\ninterface IMdtp {\n    getTodoLists: () => void;\n    addList: (title: string) => void;\n    deleteList: (listId: string) => void;\n}\n\ninterface IState {\n    addMode: boolean\n}\n\n\nclass App extends React.Component<IMstp & IMdtp & IProps, IState> {\n\n    state: IState = {\n        addMode: false\n    };\n\n    async componentDidMount() {\n        await api.login();\n        this.props.getTodoLists()\n    }\n\n    closeTodoList = () => {\n        this.props.history.push('/')\n    };\n\n    toggleAddForm = () => {\n        this.setState({addMode: !this.state.addMode});\n    };\n    addNewList = (title: string) => {\n        this.props.addList(title);\n        this.toggleAddForm();\n    };\n    deleteTodoList = (id: string) => {\n        this.props.deleteList(id)\n    };\n\n    render() {\n        //почему если ставлю точку останова срабатывает много раз???\n        let todoLists = this.props.todoLists.map(tl => {\n            return <TodoListTabs history={this.props.history} key={tl.id} id={tl.id} title={tl.title}\n                                 count={tl.tasks.length} deleteList={this.deleteTodoList}/>\n        });\n\n        let currentTodoList = this.props.todoLists.find((tl: ITodoList) => tl.id === this.props.match.params.id);\n        return (\n            <div className=\"App\">\n                <div className='App-in' style={{maxHeight: this.props.maxHeight}}>\n                    {\n                        this.props.match.params.id && currentTodoList\n                            ?\n                            <TodoList id={currentTodoList.id}\n                                      title={currentTodoList.title}\n                                      tasks={currentTodoList.tasks}\n                                      closeList={this.closeTodoList}/>\n                            : this.state.addMode\n                            ? <AddTodoListForm addNewList={this.addNewList} toggleAddForm={this.toggleAddForm}/>\n                            : <TodoListTabsWrapper onClick={this.toggleAddForm}>{todoLists}</TodoListTabsWrapper>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mstp = (state: AppState): IMstp => {\n    return {\n        todoLists: getTodolistsSelector(state),\n    }\n};\nconst mdtp = (dispatch: ThunkDispatch<any, any, ActionsTypes>): IMdtp => {\n    return {\n        getTodoLists: () => {\n            let thunk = setTodoListsTC();\n            dispatch(thunk)\n        },\n        addList: (title: string) => {\n            let thunk = addListTC(title);\n            dispatch(thunk)\n        },\n        deleteList: (listId: string) => {\n            let thunk = deleteListTC(listId);\n            dispatch(thunk)\n        }\n    }\n};\n\nexport default withRouter(connect(mstp, mdtp)(App));\n","import React from \"react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport App from \"../App\";\r\n\r\nconst MainComponent = () => {\r\n    let height = window.innerHeight;\r\n    return (\r\n        <>\r\n            <Route path={'/:id?'} render={() => <App maxHeight={height}/>}/>\r\n        </>\r\n    )\r\n};\r\nexport default MainComponent;","import * as React from \"react\";\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport './fonts/Bebas-Regular.ttf';\nimport './fonts/BebasNeue-Light.ttf';\nimport './fonts/BebasNeue-Book.ttf';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/store\";\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\nimport MainComponent from \"./components/MainComponent\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n           <MainComponent/>\n        </Provider>\n    </HashRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}